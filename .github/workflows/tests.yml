# Copyright (c) 2024 Brecht Machiels
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Test & Publish

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

env:
  current_python: '3.13'
  poetry_version: '2.1.4'
  poetry_export_version: '1.9.0'
  nox_cmd: 'nox --verbose --error-on-missing-interpreters --session'
jobs:
  regression:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} regression tests${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        os: [Windows]
        python-version: ['3.13']
        noxenv: [regression]
        cov: [1]
        name: [""]
    runs-on: ${{ matrix.os }}-latest
    env:
      NOXENV: ${{ matrix.noxenv }}
      WITH_COVERAGE: ${{ matrix.cov }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Python ${{ env.current_python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.current_python }}
    - name: Install Nox & co
      run: |
        pip${{ env.current_python }} install poetry==${{ env.poetry_version }}
        pip${{ env.current_python }} install poetry-plugin-export==${{ env.poetry_export_version }}
        poetry export --with dev --without-hashes --format constraints.txt --output constraints.txt
        pip${{ env.current_python }} install --constraint constraints.txt nox nox-poetry
    - name: Install Python ${{ matrix.python-version }}
      if: matrix.python-version != env.current_python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set NOXENV for Python ${{ matrix.python-version }}
      run: python .github/workflows/noxpy.py "${{ matrix.python-version }}"

    - name: Get Homebrew cache dir (macOS)
      id: cache-dirs-macos
      if: startsWith(runner.os, 'macOS')
      run: |
        echo "dir=$(brew --cache)" >> $GITHUB_OUTPUT
    - name: Delete Homebrew cache dir to minimize cache size (macOS)
      if: startsWith(runner.os, 'macOS')
      run: |
        rm -vrf "$(brew --cache)"
    - name: Get Homebrew package versions (macOS)
      id: homebrew-versions
      if: startsWith(runner.os, 'macOS')
      run: |
        echo "mupdftools=$(brew info --json mupdf-tools | jq -r '.[0].versions.stable')" >> $GITHUB_OUTPUT
        echo "imagemagick=$(brew info --json imagemagick | jq -r '.[0].versions.stable')" >> $GITHUB_OUTPUT
        echo "graphviz=$(brew info --json graphviz | jq -r '.[0].versions.stable')" >> $GITHUB_OUTPUT
    - name: Cache Homebrew downloads
      if: startsWith(runner.os, 'macOS')
      uses: actions/cache@v3
      with:
        path: ${{ steps.cache-dirs-macos.outputs.dir }}
        key: ${{ runner.os }}-homebrew-mupdftools${{ steps.homebrew-versions.outputs.mupdftools }}-im${{ steps.homebrew-versions.outputs.imagemagick }}-graphviz${{ steps.homebrew-versions.outputs.graphviz }}

    - name: Get scoop cache dir (Windows)
      id: cache-dirs-windows
      if: startsWith(runner.os, 'Windows')
      run: |
        echo "dir=$(echo $env:USERPROFILE\scoop\cache)" >> $env:GITHUB_OUTPUT
    - name: Cache scoop downloads
      if: startsWith(runner.os, 'Windows')
      uses: actions/cache@v3
      with:
        path: ${{ steps.cache-dirs-windows.outputs.dir }}
        key: ${{ runner.os }}-scoop

    - name: Set up Homebrew
      if: startsWith(runner.os, 'Linux')
      uses: Homebrew/actions/setup-homebrew@main
    - name: Install tools required by the regression tests (Linux)
      if: startsWith(runner.os, 'Linux')
      run: |
        brew install mupdf-tools imagemagick
    - name: Install tools required by the regression tests (macOS)
      if: startsWith(runner.os, 'macOS')
      run: |
        brew install mupdf-tools imagemagick graphviz
    - name: Install tools required by the regression tests (Windows)
      if: startsWith(runner.os, 'Windows')
      run: |
        choco install mupdf --version=1.26.0

    - name: Run Nox
      run: ${{ env.nox_cmd }} ${{ env.NOXENV }} -- -s
    - name: Store test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }} ${{ matrix.python-version }} regression tests${{ matrix.name }}
        path: tests_regression/*_output/

    - name: Upload coverage statistics to codecov.io
      if: env.WITH_COVERAGE == 1
      shell: bash
      run: |
        bash <(curl -s https://codecov.io/bash) -f coverage.xml -F ${{ env.NOXENV }},${{ matrix.python-version }},${{ runner.os }}

    - name: Setup tmate debug session
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled && failure() }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
